name: Build AAB from PWA

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  MANIFEST_URL: https://picnic-3.onrender.com/manifest.json
  HOST_NAME: picnic-3.onrender.com
  APP_ID: com.onrender.picnic3.twa
  APP_NAME: Picnic Vakti
  LAUNCHER_NAME: Picnic
  START_URL: /
  DISPLAY_MODE: standalone
  FALLBACK_TYPE: customtabs

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Bubblewrap CLI (pinned)
        run: npm i -g @bubblewrap/cli@1.24.1

      # Keystore'u secret'tan çıkar (ZORUNLU: SIGNING_KEYSTORE_BASE64)
      - name: Restore signing.keystore
        shell: bash
        run: |
          set -euo pipefail
          test -n "${{ secrets.SIGNING_KEYSTORE_BASE64 }}" || { echo "Missing SIGNING_KEYSTORE_BASE64 secret"; exit 1; }
          echo "${{ secrets.SIGNING_KEYSTORE_BASE64 }}" | base64 -d > signing.keystore
          test -s signing.keystore || { echo "signing.keystore could not be created"; exit 1; }
          echo "✅ Keystore restored (size: $(stat -c%s signing.keystore) bytes)"

      # Bubblewrap config (JDK/SDK yolları)
      - name: Configure Bubblewrap
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.bubblewrap
          cat > ~/.bubblewrap/config.json <<JSON
          {
            "jdkPath": "${{ env.JAVA_HOME }}",
            "androidSdkPath": "/usr/local/lib/android/sdk"
          }
          JSON

      # Manifest erişilebilir mi?
      - name: Check manifest URL
        shell: bash
        run: |
          set -euo pipefail
          curl -sSIL "$MANIFEST_URL" | head -n1

      # INIT’i promptsuz çalıştır: keystore yolu ve alias'ı stdin ile besle
      - name: Init TWA (non-interactive)
        shell: bash
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          set -euo pipefail
          KEYSTORE_PATH="$GITHUB_WORKSPACE/signing.keystore"
          ALIAS="${KEY_ALIAS:-upload}"

          # Bubblewrap bazı runner'larda android.keystore varsayılanını arıyor; yoksa sormasın diye temizle
          rm -f "$GITHUB_WORKSPACE/android.keystore" || true

          # İki promptu (keystore path + alias) otomatik veriyoruz
          printf "%s\n%s\n" "$KEYSTORE_PATH" "$ALIAS" | npx bubblewrap init \
            --manifest="$MANIFEST_URL" \
            --directory . \
            --skipPwaValidation \
            --no-input \
            --host="$HOST_NAME" \
            --applicationId="$APP_ID" \
            --name="$APP_NAME" \
            --launcherName="$LAUNCHER_NAME" \
            --startUrl="$START_URL" \
            --display="$DISPLAY_MODE" \
            --fallbackType="$FALLBACK_TYPE"

      # İmzalı AAB build (promptsuz)
      - name: Build signed AAB (no prompts)
        shell: bash
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          set -euo pipefail
          KEYSTORE_PATH="$GITHUB_WORKSPACE/signing.keystore"
          test -s "$KEYSTORE_PATH" || { echo "Keystore not found at $KEYSTORE_PATH"; exit 1; }

          npx bubblewrap build \
            --no-input \
            --signingKey="$KEYSTORE_PATH" \
            --signingKeyAlias="${KEY_ALIAS:-upload}" \
            --keyStorePassword="${KEYSTORE_PASSWORD:-picnic123}" \
            --signingKeyPassword="${KEY_PASSWORD:-picnic123}"

      # .aab çıktısını artefakt olarak yükle
      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: picnic-aab
          path: "**/*.aab"
